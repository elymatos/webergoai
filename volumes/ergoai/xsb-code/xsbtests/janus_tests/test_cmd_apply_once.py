import sys
sys.path.insert(0,'../../XSB/packages/janus/janus-py')
import janus as jns
from janus import pp_jns_cmd, pp_jns_apply_once

orig_output = sys.stdout 
sys.stdout = open('./temp', 'w')

jns.consult('jns_test')

def test_cmd_apply_once():
    print('------------ command: arity 1 -------------')
    pp_jns_cmd('jns_test','win',0)
    pp_jns_cmd('jns_test','one_ary_fail','p')
    pp_jns_cmd('jns_test','instan','b')
    print('----------- command arity 0 --------------')
    pp_jns_cmd('jns_test','zero_ary_true')
    pp_jns_cmd('jns_test','zero_ary_fail')
    pp_jns_cmd('jns_test','zero_ary_undef')
    print('----------- query: arity 1 --------------')
    X = jns.apply_once('jns_test','one_ary_undef',truth_vals=jns.PLAIN_TRUTHVALS)
    print(X)
    print('---------')
    X = jns.apply_once('jns_test','one_ary_undef')
    print("jns.apply_once('jns_test','one_ary_undef')")
    print('Answer = ' + str(X) )
    print('---------')
    X = jns.apply_once('jns_test','instan')
    print("jns.apply_once('jns_test','instan')")
    print('Answer = ' + str(X) )
    print('---------')
#        X = jns.apply_once('jns_test','one_ary_fail')
#        print("jns.apply_once('jns_test','one_ary_fail')")
#        print('Answer = ' + str(X) )
#    print('---------')
    X = jns.apply_once('jns_test','return_tuple')
    print("jns.apply_once('jns_test','return_tuple')")
    print('Answer = ' + str(X) )
    print('---------')
    X = jns.apply_once('jns_test','return_term')
    print("jns.apply_once('jns_test','return_term')")
    print('Answer = ' + str(X) )
    print('------------ query: arity 2 -------------')
    X = jns.apply_once('basics','reverse',[1,2,3,{'a':{'b':'c'}}])
    print("jns.apply_once('basics','reverse',[1,2,3,{'a':{'b':'c'}}])")
    jns.apply_once('basics','reverse',[1,2,3,{'a':{'b':'c'}}])
    print('Answer = ' + str(X) )
    print('---------')
    X = jns.apply_once('string','concat_atom',['a','b','c','d','e','f','g'])
    print("jns.apply_once('string','concat_atom',['a','b','c','d','e','f','g'])")
    jns.apply_once('string','concat_atom',['a','b','c','d','e','f','g'])
    print('Answer = ' + str(X) )
    print('------------ query: arity 3 -------------')
    X = jns.apply_once('basics','append',[1,2],[3,4])
    print("jns.apply_once('basics','append',[1,2],[3,4])")
    print('Answer = ' + str(X) )
    print('----------- query: arity 1 (PLAIN_TRUTHVALS)--------------')
    pp_jns_apply_once('jns_test','one_ary_undef',truth_vals=jns.PLAIN_TRUTHVALS)
    pp_jns_apply_once('jns_test','instan',truth_vals=jns.PLAIN_TRUTHVALS)
    pp_jns_apply_once('jns_test','one_ary_fail',truth_vals=jns.PLAIN_TRUTHVALS)
    pp_jns_apply_once('jns_test','return_tuple',truth_vals=jns.PLAIN_TRUTHVALS)
    pp_jns_apply_once('jns_test','return_term',truth_vals=jns.PLAIN_TRUTHVALS)
    print('------------ query: arity 2 (PLAIN_TRUTHVALS) -------------')
    pp_jns_apply_once('basics','reverse',[1,2,3,{'a':{'b':'c'}}],truth_vals=jns.PLAIN_TRUTHVALS)
    pp_jns_apply_once('string','concat_atom',['a','b','c','d','e','f','g'],truth_vals=jns.PLAIN_TRUTHVALS)
    print('------------ query: arity 3  (PLAIN_TRUTHVALS) -------------')
    pp_jns_apply_once('basics','append',[1,2],[3,4],truth_vals=jns.PLAIN_TRUTHVALS)
    print('----------- done with test_cmd_query --------------')
#    print('----------- testing interrupts --------------')
#    test_interrupts()

test_cmd_apply_once()

sys.stdout = orig_output
