/* ===========================================
   MAIN CSS ENTRY POINT
   Complete design system import structure
   =========================================== */



/* ===========================================
   1. DESIGN SYSTEM TOKENS (First Priority)
   Import all design tokens before any other styles
   =========================================== */

/* Core design system tokens */
@import 'design-system/tokens/_index.less';

/* ===========================================
   2. RESET AND NORMALIZE
   Base browser styles and resets
   =========================================== */
@import 'design-system/base/_reset.less';

// ===== 3. FOMANTIC-UI FRAMEWORK =====
// Fomantic-UI framework - now configured to use our design tokens
@import '../css/fomantic-ui/semantic.less';

// ===== 4. UTILITY CLASSES =====
@import 'design-system/utilities/spacing.less';
@import 'design-system/utilities/helpers.less';

// ===== 5. DESIGN SYSTEM COMPONENTS =====
//@import 'design-system/components/components.less';
//@import 'design-system/components/colors.less';
//@import 'design-system/components/htmx.less';
//@import 'design-system/components/cards.less';
//@import 'design-system/components/icons.less';

/* ===========================================
   4. DESIGN SYSTEM COMPONENTS
   Import component styles that use design tokens
   =========================================== */

/* Component styles */
@import 'design-system/components/components.less';

// ===== 6. PAGES =====
@import 'design-system/pages/crud.less';
@import 'design-system/pages/dashboard.less';
@import 'design-system/pages/annotation.less';

// ===== 6. LAYOUT SYSTEM =====
@import 'design-system/layout/grid.less';
//@import 'design-system/layout/responsive.less';


/* ===========================================
   15. DOCUMENTATION AND MAINTENANCE
   Comments and structure for maintainability
   =========================================== */

/*
Design System Structure:
------------------------

1. Tokens Layer (Foundation)
   - Root variables (_root-variables.css)
   - Spacing tokens (_spacing.css)
   - Typography tokens (_typography.css)
   - Color tokens (_colors.css)

2. Component Layer (Building Blocks)
   - Buttons, forms, cards, etc.
   - Each component uses design tokens
   - Consistent API across all components

3. Utility Layer (Helpers)
   - Layout utilities
   - Spacing utilities
   - Typography utilities
   - Color utilities

4. Theme Layer (Customization)
   - Light/dark themes
   - High contrast mode
   - Brand variations

Usage Guidelines:
-----------------

1. Always use design tokens instead of hard-coded values
2. Follow the spacing scale for consistent layouts
3. Use semantic color names for better maintainability
4. Leverage utility classes for quick styling
5. Test across different themes and accessibility modes

Naming Conventions:
-------------------

- CSS Custom Properties: --category-property-variant
- Component Classes: .component-element-modifier
- Utility Classes: .property-value
- State Classes: .is-state or .has-state

Examples:
- --color-primary-500 (color token)
- --spacing-4 (spacing token)
- .btn-primary (component)
- .text-center (utility)
- .is-loading (state)

Performance Notes:
------------------

- Design tokens are cached by the browser
- Utility classes reduce CSS bundle size
- Components are modular and tree-shakeable
- Animations respect reduced motion preferences
- Print styles optimize for paper output

Accessibility Features:
-----------------------

- High contrast mode support
- Reduced motion preferences
- Focus management utilities
- Screen reader optimizations
- Color blind friendly alternatives

Browser Support:
----------------

- Modern browsers: Full feature support
- Older browsers: Graceful degradation
- Fallbacks for unsupported features
- Progressive enhancement approach
*/
